name: Security Label Comment

on:
  pull_request:
    types:
    - labeled

permissions:
  pull-requests: write
  issues: write

jobs:
  comment-label:
    runs-on: ubuntu-latest
    steps:
      - name: Check if any security label is present
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredLabels = [
              "A: No Security Impact",
              "B: Developer Security Review - light touch",
              "C: Security Team to Threat Model",
              "D: Security Team to Penetration Test"
            ];
          
            const labels = context.payload.pull_request.labels.map(label => label.name);

            const longBody = `
            By adding the security label or commenting LGTM, the approver acknowledges that 
            - the majority of the code added is pre-existing code that has been verified/security reviewed and/or contains minimal server-side changes
            - the code has been reviewed for Cross Organisation issues and no issues have been identified
            - the data and permissions applied have been validated and conform to security standards
            `;
            
            // Define custom messages for each label
            const messages = {
              "A: No Security Impact": `By adding the security label or commenting LGTM, the approver acknowledges that there is no security impact to Workvivo in this PR.`,
              
              "B: Developer Security Review - light touch": longBody,
              
              "C: Security Team to Threat Model": `A message has been sent to the Workvivo security team.`,
            
              "D: Security Team to Penetration Test": `A message has been sent to the Workvivo security team.`}
            
            for (const label of requiredLabels) {
              if (labels.includes(label)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: messages[label]
                });
              }
            }
      - name: Extract PR information
        id: pr_info
        run: |
          echo "::set-output name=pr_name::$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")"
          echo "::set-output name=opened_by::$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")"
      - name: Check for specific label
        env:
          API_KEY: ${{ secrets.GH_LABEL }}
        run: |
          LABEL=$(jq -r '.label.name' "$GITHUB_EVENT_PATH")
          if [ "$LABEL" = "D: Penetration Test" ]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "x-api-key: $API_KEY" \
              -d '{
                "pr_url": "${{ github.event.pull_request.html_url }}",
                "pr_name": "${{ steps.pr_info.outputs.pr_name }}",
                "opened_by": "${{ steps.pr_info.outputs.opened_by }}",
                "label": "D: Penetration Test"
              }' \
              https://0pk7g7hd4j.execute-api.eu-west-1.amazonaws.com/prod
          fi
